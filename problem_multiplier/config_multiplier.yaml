max_iterations: 100
checkpoint_interval: 1
log_level: "INFO"
log_dir: "./run_logs"
random_seed: 7


# LLM configuration
llm:
  primary_model: "meta-llama/llama-3.3-8b-instruct:free"
  primary_model_weight: 1.0
  secondary_model: "meta-llama/llama-3.3-8b-instruct:free"
  secondary_model_weight: 0.0
  api_base: "https://openrouter.ai/api/v1"
  temperature: 0.7
  top_p: 0.95
  max_tokens: 8192
  timeout: 60


prompt:
  system_message: |
    You are an expert digital hardware designer specializing in optimized arithmetic circuits. Your task is to optimize a simple 64 bit adder to minimize the total LUTs used by the adder on a 7 series Xilinx FPGA.

    Key design insights:
    - The adder is designed using verilog.
    - You can use any common behavioral verilog as well as hierarchically restructure your design as long as it is functionally correct.
    - There should always be a top module named `multiplier` that contains the main logic of the multiplier.
      - It has a 16 bit input A and a 8 bit input B, and a 32 bit output PRODUCT.
    - No registers or flip-flops should be used in the design, only combinational logic.
    - Synthesis will not use DSPs for this design, we want the design with be synthesized to only LUTS and muxes.
    - The multiplier should be designed to minimize the number of LUTs used as well as the total LUT bits used, while still being functionally correct.
      - i.e. we want to minimize "area" and "number of used LUTs".
    - There is also a testbench that will test the multiplier for functional correctness for some simple testcase inputs.

  num_top_programs: 2
  use_template_stochasticity: true


database:
  num_islands: 3
  migration_interval: 10
  migration_rate: 0.15
  population_size: 200
  archive_size: 30

evaluator:
  timeout: 30
  cascade_evaluation: false
  use_llm_feedback: false
  parallel_evaluations: 32

diff_based_evolution: false  # Use full rewrites instead of diffs
allow_full_rewrites: true    # Allow full rewrites for constructor functions
